name: Fuzz
on:
  workflow_call:
    inputs:
      duration:
        required: true
        type: string
      os:
        required: true
        type: string
      shell:
        required: true
        type: string
      targets:
        required: true
        type: string

permissions: read-all

jobs:
  fuzz:
    name: ${{ inputs.shell }} (${{ matrix.target }})
    runs-on: ${{ inputs.os }}
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        target: ${{ fromJson(inputs.targets) }}
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: block
          allowed-endpoints: >
            actions-results-receiver-production.githubapp.com:443
            api.github.com:443
            artifactcache.actions.githubusercontent.com:443
            azure.archive.ubuntu.com:80
            github.com:443
            gitlab.com:443
            nodejs.org:443
            objects.githubusercontent.com:443
            pipelines.actions.githubusercontent.com:443
            registry.npmjs.org:443
      - name: Checkout repository
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          persist-credentials: false
      - name: Create identifier
        id: run-id
        shell: bash
        env:
          OS: ${{ inputs.os }}
          SHELL: ${{ inputs.shell }}
          TARGET: ${{ matrix.target }}
        run: |
          fileName="$(basename "${SHELL}")"
          shellName="${fileName%.exe}"
          echo "result=${OS}-${shellName}-${TARGET}" >>"${GITHUB_OUTPUT}"
      - name: Install Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          cache: npm
          node-version-file: .nvmrc
      - name: Set up BusyBox
        if: ${{ contains(inputs.shell, 'busybox') }}
        run: |
          mkdir -p /tmp/busybox
          ln -s "$(which busybox)" /tmp/busybox/sh
      - name: Install csh
        if: ${{ contains(inputs.shell, 'csh') }}
        run: sudo apt-get --assume-yes install csh
      - name: Install Zsh
        if: ${{ contains(inputs.shell, 'zsh') }}
        run: sudo apt-get --assume-yes install zsh
      - name: Install dependencies
        run: npm clean-install
      - name: Fuzz (target '${{ matrix.target }}')
        id: fuzz
        shell: bash {0}
        env:
          DURATION: ${{ inputs.duration }}
          FUZZ_SHELL: ${{ inputs.shell }}
          TARGET: ${{ matrix.target }}
        run: |
          timeout "${DURATION}s" npm run fuzz "${TARGET}"
          export EXIT_CODE="$?"
          {
            if [[ ("$EXIT_CODE" == 124) ]]; then
              echo 'fuzz-error=false'
              echo 'script-error=false'
            elif [[ ("$EXIT_CODE" == 1) ]]; then
              echo 'fuzz-error=true'
              echo 'script-error=false'
            else
              echo 'fuzz-error=false'
              echo 'script-error=true'
              echo "exit-code=$EXIT_CODE"
            fi
          } >>"$GITHUB_OUTPUT"
      - name: Check for unexpected error
        if: ${{ steps.fuzz.outputs.script-error == 'true' }}
        env:
          EXIT_CODE: ${{ steps.fuzz.outputs.exit-code }}
        run: |
          echo "Unexpected error: ${EXIT_CODE}"
          exit 1
      - name: Upload new corpus
        if: ${{ steps.fuzz.outputs.fuzz-error == 'true' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: fuzz-crash-${{ steps.run-id.outputs.result }}
          path: test/fuzz/corpus/
      - name: Check for fuzz finding
        if: ${{ steps.fuzz.outputs.fuzz-error == 'true' }}
        run: exit 1
